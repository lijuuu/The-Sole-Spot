// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/product.go

// Package MockUseCase is a generated GoMock package.
package MockUseCase

import (
	models "ecommerce_clean_arch/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductUseCase is a mock of ProductUseCase interface.
type MockProductUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUseCaseMockRecorder
}

// MockProductUseCaseMockRecorder is the mock recorder for MockProductUseCase.
type MockProductUseCaseMockRecorder struct {
	mock *MockProductUseCase
}

// NewMockProductUseCase creates a new mock instance.
func NewMockProductUseCase(ctrl *gomock.Controller) *MockProductUseCase {
	mock := &MockProductUseCase{ctrl: ctrl}
	mock.recorder = &MockProductUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUseCase) EXPECT() *MockProductUseCaseMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductUseCase) AddProduct(product models.AddProduct) (models.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", product)
	ret0, _ := ret[0].(models.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductUseCaseMockRecorder) AddProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductUseCase)(nil).AddProduct), product)
}

// DeleteProduct mocks base method.
func (m *MockProductUseCase) DeleteProduct(productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductUseCaseMockRecorder) DeleteProduct(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductUseCase)(nil).DeleteProduct), productID)
}

// SearchProduct mocks base method.
func (m *MockProductUseCase) SearchProduct(categoryID, sortBy string) ([]models.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProduct", categoryID, sortBy)
	ret0, _ := ret[0].([]models.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProduct indicates an expected call of SearchProduct.
func (mr *MockProductUseCaseMockRecorder) SearchProduct(categoryID, sortBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProduct", reflect.TypeOf((*MockProductUseCase)(nil).SearchProduct), categoryID, sortBy)
}

// UpdateProduct mocks base method.
func (m *MockProductUseCase) UpdateProduct(products models.ProductResponse, productID int) (models.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", products, productID)
	ret0, _ := ret[0].(models.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductUseCaseMockRecorder) UpdateProduct(products, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductUseCase)(nil).UpdateProduct), products, productID)
}
