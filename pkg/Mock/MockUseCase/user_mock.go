// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/user.go

// Package MockUseCase is a generated GoMock package.
package MockUseCase

import (
	domain "ecommerce_clean_arch/pkg/domain"
	models "ecommerce_clean_arch/pkg/utils/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCaseInterface is a mock of UserUseCaseInterface interface.
type MockUserUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseInterfaceMockRecorder
}

// MockUserUseCaseInterfaceMockRecorder is the mock recorder for MockUserUseCaseInterface.
type MockUserUseCaseInterfaceMockRecorder struct {
	mock *MockUserUseCaseInterface
}

// NewMockUserUseCaseInterface creates a new mock instance.
func NewMockUserUseCaseInterface(ctrl *gomock.Controller) *MockUserUseCaseInterface {
	mock := &MockUserUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCaseInterface) EXPECT() *MockUserUseCaseInterfaceMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserUseCaseInterface) AddAddress(userID int, address models.AddAddress) (models.AddAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", userID, address)
	ret0, _ := ret[0].(models.AddAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserUseCaseInterfaceMockRecorder) AddAddress(userID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserUseCaseInterface)(nil).AddAddress), userID, address)
}

// DeleteAddress mocks base method.
func (m *MockUserUseCaseInterface) DeleteAddress(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockUserUseCaseInterfaceMockRecorder) DeleteAddress(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockUserUseCaseInterface)(nil).DeleteAddress), userID)
}

// GenerateAndSendOTP mocks base method.
func (m *MockUserUseCaseInterface) GenerateAndSendOTP(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAndSendOTP", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateAndSendOTP indicates an expected call of GenerateAndSendOTP.
func (mr *MockUserUseCaseInterfaceMockRecorder) GenerateAndSendOTP(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAndSendOTP", reflect.TypeOf((*MockUserUseCaseInterface)(nil).GenerateAndSendOTP), email)
}

// GetAllAddresses mocks base method.
func (m *MockUserUseCaseInterface) GetAllAddresses(id int) ([]domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddresses", id)
	ret0, _ := ret[0].([]domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddresses indicates an expected call of GetAllAddresses.
func (mr *MockUserUseCaseInterfaceMockRecorder) GetAllAddresses(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddresses", reflect.TypeOf((*MockUserUseCaseInterface)(nil).GetAllAddresses), id)
}

// GetProducts mocks base method.
func (m *MockUserUseCaseInterface) GetProducts() ([]models.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].([]models.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockUserUseCaseInterfaceMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockUserUseCaseInterface)(nil).GetProducts))
}

// IsEmailExists mocks base method.
func (m *MockUserUseCaseInterface) IsEmailExists(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailExists", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmailExists indicates an expected call of IsEmailExists.
func (mr *MockUserUseCaseInterfaceMockRecorder) IsEmailExists(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailExists", reflect.TypeOf((*MockUserUseCaseInterface)(nil).IsEmailExists), email)
}

// IsPhoneExists mocks base method.
func (m *MockUserUseCaseInterface) IsPhoneExists(phone string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPhoneExists", phone)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPhoneExists indicates an expected call of IsPhoneExists.
func (mr *MockUserUseCaseInterfaceMockRecorder) IsPhoneExists(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPhoneExists", reflect.TypeOf((*MockUserUseCaseInterface)(nil).IsPhoneExists), phone)
}

// ListCategory mocks base method.
func (m *MockUserUseCaseInterface) ListCategory() ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategory")
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategory indicates an expected call of ListCategory.
func (mr *MockUserUseCaseInterfaceMockRecorder) ListCategory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategory", reflect.TypeOf((*MockUserUseCaseInterface)(nil).ListCategory))
}

// ResendOTP mocks base method.
func (m *MockUserUseCaseInterface) ResendOTP(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendOTP", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResendOTP indicates an expected call of ResendOTP.
func (mr *MockUserUseCaseInterfaceMockRecorder) ResendOTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendOTP", reflect.TypeOf((*MockUserUseCaseInterface)(nil).ResendOTP), arg0)
}

// ResetPassword mocks base method.
func (m *MockUserUseCaseInterface) ResetPassword(otp, password, confirmPassword string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", otp, password, confirmPassword)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUserUseCaseInterfaceMockRecorder) ResetPassword(otp, password, confirmPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserUseCaseInterface)(nil).ResetPassword), otp, password, confirmPassword)
}

// SaveTempUserAndGenerateOTP mocks base method.
func (m *MockUserUseCaseInterface) SaveTempUserAndGenerateOTP(user models.User) (models.TokenUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTempUserAndGenerateOTP", user)
	ret0, _ := ret[0].(models.TokenUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTempUserAndGenerateOTP indicates an expected call of SaveTempUserAndGenerateOTP.
func (mr *MockUserUseCaseInterfaceMockRecorder) SaveTempUserAndGenerateOTP(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTempUserAndGenerateOTP", reflect.TypeOf((*MockUserUseCaseInterface)(nil).SaveTempUserAndGenerateOTP), user)
}

// UpdateAddress mocks base method.
func (m *MockUserUseCaseInterface) UpdateAddress(userID int, address domain.Address) (domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", userID, address)
	ret0, _ := ret[0].(domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserUseCaseInterfaceMockRecorder) UpdateAddress(userID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserUseCaseInterface)(nil).UpdateAddress), userID, address)
}

// UpdateProfile mocks base method.
func (m *MockUserUseCaseInterface) UpdateProfile(editProfile models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", editProfile)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserUseCaseInterfaceMockRecorder) UpdateProfile(editProfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserUseCaseInterface)(nil).UpdateProfile), editProfile)
}

// UserLogin mocks base method.
func (m *MockUserUseCaseInterface) UserLogin(user, input models.User) (models.TokenUsers, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", user, input)
	ret0, _ := ret[0].(models.TokenUsers)
	ret1, _ := ret[1].(models.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserUseCaseInterfaceMockRecorder) UserLogin(user, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserUseCaseInterface)(nil).UserLogin), user, input)
}

// UserProfile mocks base method.
func (m *MockUserUseCaseInterface) UserProfile(userID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserProfile", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserProfile indicates an expected call of UserProfile.
func (mr *MockUserUseCaseInterfaceMockRecorder) UserProfile(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserProfile", reflect.TypeOf((*MockUserUseCaseInterface)(nil).UserProfile), userID)
}

// UserSignup mocks base method.
func (m *MockUserUseCaseInterface) UserSignup(user models.User) (models.TokenUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", user)
	ret0, _ := ret[0].(models.TokenUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockUserUseCaseInterfaceMockRecorder) UserSignup(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockUserUseCaseInterface)(nil).UserSignup), user)
}

// VerifyOTP mocks base method.
func (m *MockUserUseCaseInterface) VerifyOTP(email string, verify models.VerifyOTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", email, verify)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockUserUseCaseInterfaceMockRecorder) VerifyOTP(email, verify interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockUserUseCaseInterface)(nil).VerifyOTP), email, verify)
}

// VerifyOTPAndRegisterUser mocks base method.
func (m *MockUserUseCaseInterface) VerifyOTPAndRegisterUser(email, otp string) (models.TokenUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTPAndRegisterUser", email, otp)
	ret0, _ := ret[0].(models.TokenUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTPAndRegisterUser indicates an expected call of VerifyOTPAndRegisterUser.
func (mr *MockUserUseCaseInterfaceMockRecorder) VerifyOTPAndRegisterUser(email, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTPAndRegisterUser", reflect.TypeOf((*MockUserUseCaseInterface)(nil).VerifyOTPAndRegisterUser), email, otp)
}

// generateAndSaveOTP mocks base method.
func (m *MockUserUseCaseInterface) generateAndSaveOTP(email string) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "generateAndSaveOTP", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// generateAndSaveOTP indicates an expected call of generateAndSaveOTP.
func (mr *MockUserUseCaseInterfaceMockRecorder) generateAndSaveOTP(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "generateAndSaveOTP", reflect.TypeOf((*MockUserUseCaseInterface)(nil).generateAndSaveOTP), email)
}
