// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/order.go

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	domain "ecommerce_clean_arch/pkg/domain"
	models "ecommerce_clean_arch/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddressExist mocks base method.
func (m *MockOrderRepository) AddressExist(orderBody models.OrderIncoming) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressExist", orderBody)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressExist indicates an expected call of AddressExist.
func (mr *MockOrderRepositoryMockRecorder) AddressExist(orderBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressExist", reflect.TypeOf((*MockOrderRepository)(nil).AddressExist), orderBody)
}

// BeginTransaction mocks base method.
func (m *MockOrderRepository) BeginTransaction() (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockOrderRepositoryMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockOrderRepository)(nil).BeginTransaction))
}

// CancelOrderItem mocks base method.
func (m *MockOrderRepository) CancelOrderItem(orderItemID string, userID int) (domain.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrderItem", orderItemID, userID)
	ret0, _ := ret[0].(domain.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrderItem indicates an expected call of CancelOrderItem.
func (mr *MockOrderRepositoryMockRecorder) CancelOrderItem(orderItemID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrderItem", reflect.TypeOf((*MockOrderRepository)(nil).CancelOrderItem), orderItemID, userID)
}

// CancelOrders mocks base method.
func (m *MockOrderRepository) CancelOrders(orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrders", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrders indicates an expected call of CancelOrders.
func (mr *MockOrderRepositoryMockRecorder) CancelOrders(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrders", reflect.TypeOf((*MockOrderRepository)(nil).CancelOrders), orderID)
}

// CheckCouponAppliedOrNot mocks base method.
func (m *MockOrderRepository) CheckCouponAppliedOrNot(userID int, couponID string) uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCouponAppliedOrNot", userID, couponID)
	ret0, _ := ret[0].(uint)
	return ret0
}

// CheckCouponAppliedOrNot indicates an expected call of CheckCouponAppliedOrNot.
func (mr *MockOrderRepositoryMockRecorder) CheckCouponAppliedOrNot(userID, couponID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCouponAppliedOrNot", reflect.TypeOf((*MockOrderRepository)(nil).CheckCouponAppliedOrNot), userID, couponID)
}

// CheckCouponUsage mocks base method.
func (m *MockOrderRepository) CheckCouponUsage(userID uint, couponCode string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCouponUsage", userID, couponCode)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCouponUsage indicates an expected call of CheckCouponUsage.
func (mr *MockOrderRepositoryMockRecorder) CheckCouponUsage(userID, couponCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCouponUsage", reflect.TypeOf((*MockOrderRepository)(nil).CheckCouponUsage), userID, couponCode)
}

// CommitTransaction mocks base method.
func (m *MockOrderRepository) CommitTransaction(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockOrderRepositoryMockRecorder) CommitTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockOrderRepository)(nil).CommitTransaction), tx)
}

// CreateOrder mocks base method.
func (m *MockOrderRepository) CreateOrder(tx *gorm.DB, orderDetails models.OrderFromCart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", tx, orderDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryMockRecorder) CreateOrder(tx, orderDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrder), tx, orderDetails)
}

// CreateOrderItems mocks base method.
func (m *MockOrderRepository) CreateOrderItems(tx *gorm.DB, orderItems []domain.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItems", tx, orderItems)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderItems indicates an expected call of CreateOrderItems.
func (mr *MockOrderRepositoryMockRecorder) CreateOrderItems(tx, orderItems interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItems", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrderItems), tx, orderItems)
}

// DoesCartExist mocks base method.
func (m *MockOrderRepository) DoesCartExist(orderBody models.OrderFromCart, userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesCartExist", orderBody, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesCartExist indicates an expected call of DoesCartExist.
func (mr *MockOrderRepositoryMockRecorder) DoesCartExist(orderBody, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesCartExist", reflect.TypeOf((*MockOrderRepository)(nil).DoesCartExist), orderBody, userID)
}

// FetchOrderDetailsFromDB mocks base method.
func (m *MockOrderRepository) FetchOrderDetailsFromDB(orderID string) (models.CombinedOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrderDetailsFromDB", orderID)
	ret0, _ := ret[0].(models.CombinedOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrderDetailsFromDB indicates an expected call of FetchOrderDetailsFromDB.
func (mr *MockOrderRepositoryMockRecorder) FetchOrderDetailsFromDB(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrderDetailsFromDB", reflect.TypeOf((*MockOrderRepository)(nil).FetchOrderDetailsFromDB), orderID)
}

// GetBriefOrderDetails mocks base method.
func (m *MockOrderRepository) GetBriefOrderDetails(orderID string) (domain.OrderSuccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBriefOrderDetails", orderID)
	ret0, _ := ret[0].(domain.OrderSuccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBriefOrderDetails indicates an expected call of GetBriefOrderDetails.
func (mr *MockOrderRepositoryMockRecorder) GetBriefOrderDetails(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBriefOrderDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetBriefOrderDetails), orderID)
}

// GetCouponDetails mocks base method.
func (m *MockOrderRepository) GetCouponDetails(couponCode string) (models.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouponDetails", couponCode)
	ret0, _ := ret[0].(models.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouponDetails indicates an expected call of GetCouponDetails.
func (mr *MockOrderRepositoryMockRecorder) GetCouponDetails(couponCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouponDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetCouponDetails), couponCode)
}

// GetOrderDetails mocks base method.
func (m *MockOrderRepository) GetOrderDetails(userID int) ([]models.FullOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetails", userID)
	ret0, _ := ret[0].([]models.FullOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetails indicates an expected call of GetOrderDetails.
func (mr *MockOrderRepositoryMockRecorder) GetOrderDetails(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderDetails), userID)
}

// GetOrderItemDetails mocks base method.
func (m *MockOrderRepository) GetOrderItemDetails(tx *gorm.DB, orderItemID int) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemDetails", tx, orderItemID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrderItemDetails indicates an expected call of GetOrderItemDetails.
func (mr *MockOrderRepositoryMockRecorder) GetOrderItemDetails(tx, orderItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderItemDetails), tx, orderItemID)
}

// GetOrderItemPrice mocks base method.
func (m *MockOrderRepository) GetOrderItemPrice(tx *gorm.DB, orderItemID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemPrice", tx, orderItemID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemPrice indicates an expected call of GetOrderItemPrice.
func (mr *MockOrderRepositoryMockRecorder) GetOrderItemPrice(tx, orderItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemPrice", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderItemPrice), tx, orderItemID)
}

// GetOrderStatus mocks base method.
func (m *MockOrderRepository) GetOrderStatus(orderID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatus", orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatus indicates an expected call of GetOrderStatus.
func (mr *MockOrderRepositoryMockRecorder) GetOrderStatus(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatus", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderStatus), orderID)
}

// GetPaymentStatus mocks base method.
func (m *MockOrderRepository) GetPaymentStatus(orderID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentStatus", orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentStatus indicates an expected call of GetPaymentStatus.
func (mr *MockOrderRepositoryMockRecorder) GetPaymentStatus(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentStatus", reflect.TypeOf((*MockOrderRepository)(nil).GetPaymentStatus), orderID)
}

// GetPriceoftheproduct mocks base method.
func (m *MockOrderRepository) GetPriceoftheproduct(orderID string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceoftheproduct", orderID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriceoftheproduct indicates an expected call of GetPriceoftheproduct.
func (mr *MockOrderRepositoryMockRecorder) GetPriceoftheproduct(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceoftheproduct", reflect.TypeOf((*MockOrderRepository)(nil).GetPriceoftheproduct), orderID)
}

// GetProductDetailsFromOrders mocks base method.
func (m *MockOrderRepository) GetProductDetailsFromOrders(orderID string) ([]models.OrderProducts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductDetailsFromOrders", orderID)
	ret0, _ := ret[0].([]models.OrderProducts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductDetailsFromOrders indicates an expected call of GetProductDetailsFromOrders.
func (mr *MockOrderRepositoryMockRecorder) GetProductDetailsFromOrders(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetailsFromOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetProductDetailsFromOrders), orderID)
}

// GetProductStock mocks base method.
func (m *MockOrderRepository) GetProductStock(ProductID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductStock", ProductID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductStock indicates an expected call of GetProductStock.
func (mr *MockOrderRepositoryMockRecorder) GetProductStock(ProductID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductStock", reflect.TypeOf((*MockOrderRepository)(nil).GetProductStock), ProductID)
}

// GetWalletAmount mocks base method.
func (m *MockOrderRepository) GetWalletAmount(userID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletAmount", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletAmount indicates an expected call of GetWalletAmount.
func (mr *MockOrderRepositoryMockRecorder) GetWalletAmount(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletAmount", reflect.TypeOf((*MockOrderRepository)(nil).GetWalletAmount), userID)
}

// RecordCouponUsage mocks base method.
func (m *MockOrderRepository) RecordCouponUsage(tx *gorm.DB, userID int, couponCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordCouponUsage", tx, userID, couponCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordCouponUsage indicates an expected call of RecordCouponUsage.
func (mr *MockOrderRepositoryMockRecorder) RecordCouponUsage(tx, userID, couponCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordCouponUsage", reflect.TypeOf((*MockOrderRepository)(nil).RecordCouponUsage), tx, userID, couponCode)
}

// ReturnUserOrder mocks base method.
func (m *MockOrderRepository) ReturnUserOrder(orderID string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnUserOrder", orderID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnUserOrder indicates an expected call of ReturnUserOrder.
func (mr *MockOrderRepositoryMockRecorder) ReturnUserOrder(orderID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnUserOrder", reflect.TypeOf((*MockOrderRepository)(nil).ReturnUserOrder), orderID, userID)
}

// RollbackTransaction mocks base method.
func (m *MockOrderRepository) RollbackTransaction(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockOrderRepositoryMockRecorder) RollbackTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockOrderRepository)(nil).RollbackTransaction), tx)
}

// UpdateProductStock mocks base method.
func (m *MockOrderRepository) UpdateProductStock(tx *gorm.DB, productID, newStock int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductStock", tx, productID, newStock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductStock indicates an expected call of UpdateProductStock.
func (mr *MockOrderRepositoryMockRecorder) UpdateProductStock(tx, productID, newStock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductStock", reflect.TypeOf((*MockOrderRepository)(nil).UpdateProductStock), tx, productID, newStock)
}

// UpdateQuantityOfProduct mocks base method.
func (m *MockOrderRepository) UpdateQuantityOfProduct(orderProducts []models.OrderProducts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantityOfProduct", orderProducts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuantityOfProduct indicates an expected call of UpdateQuantityOfProduct.
func (mr *MockOrderRepositoryMockRecorder) UpdateQuantityOfProduct(orderProducts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantityOfProduct", reflect.TypeOf((*MockOrderRepository)(nil).UpdateQuantityOfProduct), orderProducts)
}

// UpdateWalletAmount mocks base method.
func (m *MockOrderRepository) UpdateWalletAmount(walletAmount float64, UserID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletAmount", walletAmount, UserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWalletAmount indicates an expected call of UpdateWalletAmount.
func (mr *MockOrderRepositoryMockRecorder) UpdateWalletAmount(walletAmount, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletAmount", reflect.TypeOf((*MockOrderRepository)(nil).UpdateWalletAmount), walletAmount, UserID)
}

// UserOrderRelationship mocks base method.
func (m *MockOrderRepository) UserOrderRelationship(orderID string, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOrderRelationship", orderID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOrderRelationship indicates an expected call of UserOrderRelationship.
func (mr *MockOrderRepositoryMockRecorder) UserOrderRelationship(orderID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOrderRelationship", reflect.TypeOf((*MockOrderRepository)(nil).UserOrderRelationship), orderID, userID)
}
