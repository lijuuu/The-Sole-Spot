// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/user.go

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	domain "ecommerce_clean_arch/pkg/domain"
	models "ecommerce_clean_arch/pkg/utils/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserRepository) AddAddress(userID int, address models.AddAddress) (models.AddAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", userID, address)
	ret0, _ := ret[0].(models.AddAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserRepositoryMockRecorder) AddAddress(userID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserRepository)(nil).AddAddress), userID, address)
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), user)
}

// DeleteAddress mocks base method.
func (m *MockUserRepository) DeleteAddress(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockUserRepositoryMockRecorder) DeleteAddress(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockUserRepository)(nil).DeleteAddress), userID)
}

// DeleteOTP mocks base method.
func (m *MockUserRepository) DeleteOTP(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOTP", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOTP indicates an expected call of DeleteOTP.
func (mr *MockUserRepositoryMockRecorder) DeleteOTP(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOTP", reflect.TypeOf((*MockUserRepository)(nil).DeleteOTP), email)
}

// DeleteTempUser mocks base method.
func (m *MockUserRepository) DeleteTempUser(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTempUser", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTempUser indicates an expected call of DeleteTempUser.
func (mr *MockUserRepositoryMockRecorder) DeleteTempUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTempUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteTempUser), email)
}

// ForgotPassword mocks base method.
func (m *MockUserRepository) ForgotPassword(email, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", email, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockUserRepositoryMockRecorder) ForgotPassword(email, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockUserRepository)(nil).ForgotPassword), email, newPassword)
}

// GetAllAddresses mocks base method.
func (m *MockUserRepository) GetAllAddresses(userID int) ([]domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddresses", userID)
	ret0, _ := ret[0].([]domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddresses indicates an expected call of GetAllAddresses.
func (mr *MockUserRepositoryMockRecorder) GetAllAddresses(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddresses", reflect.TypeOf((*MockUserRepository)(nil).GetAllAddresses), userID)
}

// GetEmailByOTP mocks base method.
func (m *MockUserRepository) GetEmailByOTP(otp string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailByOTP", otp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailByOTP indicates an expected call of GetEmailByOTP.
func (mr *MockUserRepositoryMockRecorder) GetEmailByOTP(otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailByOTP", reflect.TypeOf((*MockUserRepository)(nil).GetEmailByOTP), otp)
}

// GetOTP mocks base method.
func (m *MockUserRepository) GetOTP(email string) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOTP", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOTP indicates an expected call of GetOTP.
func (mr *MockUserRepositoryMockRecorder) GetOTP(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOTP", reflect.TypeOf((*MockUserRepository)(nil).GetOTP), email)
}

// GetOTPByEmail mocks base method.
func (m *MockUserRepository) GetOTPByEmail(email string) (models.OTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOTPByEmail", email)
	ret0, _ := ret[0].(models.OTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOTPByEmail indicates an expected call of GetOTPByEmail.
func (mr *MockUserRepositoryMockRecorder) GetOTPByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOTPByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetOTPByEmail), email)
}

// GetPassword mocks base method.
func (m *MockUserRepository) GetPassword(userID int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", userID)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockUserRepositoryMockRecorder) GetPassword(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockUserRepository)(nil).GetPassword), userID)
}

// GetProducts mocks base method.
func (m *MockUserRepository) GetProducts() ([]models.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].([]models.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockUserRepositoryMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockUserRepository)(nil).GetProducts))
}

// GetTempUserByEmail mocks base method.
func (m *MockUserRepository) GetTempUserByEmail(email string) (models.TempUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTempUserByEmail", email)
	ret0, _ := ret[0].(models.TempUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTempUserByEmail indicates an expected call of GetTempUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetTempUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTempUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetTempUserByEmail), email)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(userID int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), userID)
}

// IsEmailExists mocks base method.
func (m *MockUserRepository) IsEmailExists(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailExists", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmailExists indicates an expected call of IsEmailExists.
func (mr *MockUserRepositoryMockRecorder) IsEmailExists(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailExists", reflect.TypeOf((*MockUserRepository)(nil).IsEmailExists), email)
}

// IsPhoneExists mocks base method.
func (m *MockUserRepository) IsPhoneExists(phone string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPhoneExists", phone)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPhoneExists indicates an expected call of IsPhoneExists.
func (mr *MockUserRepositoryMockRecorder) IsPhoneExists(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPhoneExists", reflect.TypeOf((*MockUserRepository)(nil).IsPhoneExists), phone)
}

// ListCategory mocks base method.
func (m *MockUserRepository) ListCategory() ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategory")
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategory indicates an expected call of ListCategory.
func (mr *MockUserRepositoryMockRecorder) ListCategory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategory", reflect.TypeOf((*MockUserRepository)(nil).ListCategory))
}

// SaveOTP mocks base method.
func (m *MockUserRepository) SaveOTP(email, otp string, expiry time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOTP", email, otp, expiry)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOTP indicates an expected call of SaveOTP.
func (mr *MockUserRepositoryMockRecorder) SaveOTP(email, otp, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOTP", reflect.TypeOf((*MockUserRepository)(nil).SaveOTP), email, otp, expiry)
}

// SaveOrUpdateOTP mocks base method.
func (m *MockUserRepository) SaveOrUpdateOTP(email, otp string, otpExpiry time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateOTP", email, otp, otpExpiry)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateOTP indicates an expected call of SaveOrUpdateOTP.
func (mr *MockUserRepositoryMockRecorder) SaveOrUpdateOTP(email, otp, otpExpiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateOTP", reflect.TypeOf((*MockUserRepository)(nil).SaveOrUpdateOTP), email, otp, otpExpiry)
}

// SaveTempUser mocks base method.
func (m *MockUserRepository) SaveTempUser(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTempUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTempUser indicates an expected call of SaveTempUser.
func (mr *MockUserRepositoryMockRecorder) SaveTempUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTempUser", reflect.TypeOf((*MockUserRepository)(nil).SaveTempUser), user)
}

// UnblockUser mocks base method.
func (m *MockUserRepository) UnblockUser(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockUserRepositoryMockRecorder) UnblockUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockUserRepository)(nil).UnblockUser), email)
}

// UpdateAddress mocks base method.
func (m *MockUserRepository) UpdateAddress(userID int, address models.AddAddress) (models.AddAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", userID, address)
	ret0, _ := ret[0].(models.AddAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserRepositoryMockRecorder) UpdateAddress(userID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserRepository)(nil).UpdateAddress), userID, address)
}

// UpdateOTP mocks base method.
func (m *MockUserRepository) UpdateOTP(otp models.OTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOTP", otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOTP indicates an expected call of UpdateOTP.
func (mr *MockUserRepositoryMockRecorder) UpdateOTP(otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOTP", reflect.TypeOf((*MockUserRepository)(nil).UpdateOTP), otp)
}

// UpdatePassword mocks base method.
func (m *MockUserRepository) UpdatePassword(userID int, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", userID, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepositoryMockRecorder) UpdatePassword(userID, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepository)(nil).UpdatePassword), userID, newPassword)
}

// UpdateProfile mocks base method.
func (m *MockUserRepository) UpdateProfile(editProfile models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", editProfile)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserRepositoryMockRecorder) UpdateProfile(editProfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserRepository)(nil).UpdateProfile), editProfile)
}

// UserProfile mocks base method.
func (m *MockUserRepository) UserProfile(userID int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserProfile", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserProfile indicates an expected call of UserProfile.
func (mr *MockUserRepositoryMockRecorder) UserProfile(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserProfile", reflect.TypeOf((*MockUserRepository)(nil).UserProfile), userID)
}

// VerifyOTPAndMoveUser mocks base method.
func (m *MockUserRepository) VerifyOTPAndMoveUser(email, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTPAndMoveUser", email, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyOTPAndMoveUser indicates an expected call of VerifyOTPAndMoveUser.
func (mr *MockUserRepositoryMockRecorder) VerifyOTPAndMoveUser(email, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTPAndMoveUser", reflect.TypeOf((*MockUserRepository)(nil).VerifyOTPAndMoveUser), email, otp)
}
