// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/cart.go

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	models "ecommerce_clean_arch/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartRepository) AddToCart(cart models.Cart) (models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", cart)
	ret0, _ := ret[0].(models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartRepositoryMockRecorder) AddToCart(cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartRepository)(nil).AddToCart), cart)
}

// CheckProductInCart mocks base method.
func (m *MockCartRepository) CheckProductInCart(userID, productID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductInCart", userID, productID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProductInCart indicates an expected call of CheckProductInCart.
func (mr *MockCartRepositoryMockRecorder) CheckProductInCart(userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductInCart", reflect.TypeOf((*MockCartRepository)(nil).CheckProductInCart), userID, productID)
}

// DisplayCart mocks base method.
func (m *MockCartRepository) DisplayCart(userID int) ([]models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayCart", userID)
	ret0, _ := ret[0].([]models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayCart indicates an expected call of DisplayCart.
func (mr *MockCartRepositoryMockRecorder) DisplayCart(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayCart", reflect.TypeOf((*MockCartRepository)(nil).DisplayCart), userID)
}

// GetAllItemsFromCart mocks base method.
func (m *MockCartRepository) GetAllItemsFromCart(userID int) ([]models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItemsFromCart", userID)
	ret0, _ := ret[0].([]models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItemsFromCart indicates an expected call of GetAllItemsFromCart.
func (mr *MockCartRepositoryMockRecorder) GetAllItemsFromCart(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItemsFromCart", reflect.TypeOf((*MockCartRepository)(nil).GetAllItemsFromCart), userID)
}

// GetCartItem mocks base method.
func (m *MockCartRepository) GetCartItem(userID, productID int) (*models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItem", userID, productID)
	ret0, _ := ret[0].(*models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItem indicates an expected call of GetCartItem.
func (mr *MockCartRepositoryMockRecorder) GetCartItem(userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItem", reflect.TypeOf((*MockCartRepository)(nil).GetCartItem), userID, productID)
}

// RemoveProductFromCart mocks base method.
func (m *MockCartRepository) RemoveProductFromCart(userID, productID int, price float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProductFromCart", userID, productID, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProductFromCart indicates an expected call of RemoveProductFromCart.
func (mr *MockCartRepositoryMockRecorder) RemoveProductFromCart(userID, productID, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProductFromCart", reflect.TypeOf((*MockCartRepository)(nil).RemoveProductFromCart), userID, productID, price)
}

// UpdateCart mocks base method.
func (m *MockCartRepository) UpdateCart(cart models.Cart) (models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCart", cart)
	ret0, _ := ret[0].(models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCart indicates an expected call of UpdateCart.
func (mr *MockCartRepositoryMockRecorder) UpdateCart(cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockCartRepository)(nil).UpdateCart), cart)
}
